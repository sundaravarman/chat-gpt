import React, { useEffect, useState } from 'react';
import { Table, Spin } from 'antd';
import axios from 'axios';

interface PhasingSummaryProps {
  selectedOption1: string | null;
  selectedOption2: string | null;
  selectedOption3: string[];
  selectedOption4: string[];
  selectedOption5: string[];
}

const PhasingSummary: React.FC<PhasingSummaryProps> = ({
  selectedOption1,
  selectedOption2,
  selectedOption3,
  selectedOption4,
  selectedOption5,
}) => {
  const [data, setData] = useState([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const fetchData = async () => {
      if (selectedOption1 && selectedOption2 && selectedOption3.length && selectedOption4.length && selectedOption5.length) {
        setLoading(true);
        try {
          const response = await axios.get('https://qultivateget.sdprd.oks.drekar.qualcomm.com/get-phasing-summary', {
            params: {
              selectedOption1,
              selectedOption2,
              selectedOption3: selectedOption3.join(','),
              selectedOption4: selectedOption4.join(','),
              selectedOption5: selectedOption5.join(','),
            },
          });

          const rawData = response.data;

          if (Array.isArray(rawData)) {
            setData(rawData);
          } else {
            console.error('Expected data to be an array, but got:', rawData);
            setData([]);
          }
        } catch (error) {
          console.error('Error fetching data:', error);
          setData([]);
        } finally {
          setLoading(false);
        }
      }
    };

    fetchData();
  }, [selectedOption1, selectedOption2, selectedOption3, selectedOption4, selectedOption5]);

  const columns = [
    {
      title: 'Column1',
      dataIndex: 'column1',
      key: 'column1',
      render: (value: any) => (value != null ? `${value}%` : 'N/A'), // Add % sign to the value and handle null/undefined
    },
    {
      title: 'Column2',
      dataIndex: 'column2',
      key: 'column2',
    },
    // Add more columns as needed
  ];

  if (loading) {
    return <Spin size="large" />;
  }

  return <Table columns={columns} dataSource={data} rowKey="id" />;
};

export default PhasingSummary;
