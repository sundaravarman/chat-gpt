import React, { useState, useContext, useEffect } from 'react';
import { Button, Modal, Form, Input, DatePicker, message } from 'antd';
import 'antd/dist/antd.css';
import axios from 'axios';
// Import Moment.js correctly
import moment from 'moment';
import { UserContext } from 'utils/helpers';

export type GlobalHeaderRightProps = {
  currentUser?: any;
  menu?: boolean;
  onSignOut: Function;
};

interface Approvprops {
  selectedOption1: string | null;
  selectedOption2: string | null;
  selectedOption3: string[];
}

const Approvalsystem: React.FC<Approvprops> = ({ selectedOption1, selectedOption2, selectedOption3 }) => {
  const [isModalVisible, setIsModalVisible] = useState(false);
  const [person1Value, setPerson1Value] = useState('');
  const [person2Value, setPerson2Value] = useState('');
  const [ccpersonvalue, setccpersonvalue] = useState('');
  const [person1Status, setPerson1Status] = useState(false);
  const [person2Status, setPerson2Status] = useState(false);
  const [dateStatus, setDateStatus] = useState(false);
  const [selectedDate, setSelectedDate] = useState<moment.Moment | null>(null);
  const currentUser = useContext(UserContext);
  const [isButtonEnabled, setButtonEnabled] = useState<boolean>(false);
  // const [username, setSelectedOption1username] = useState<string | null>(null);
  const showModal = () => {
    if (selectedOption1 && selectedOption2 && selectedOption3.length > 0) {
      setIsModalVisible(true);
    } else {
      message.error('Please select Project, Revision, Block before making an EXTENSION');
    }
  };

  const handleOk = () => {
    setIsModalVisible(false);
    setPerson1Value('');
    setPerson2Value('');
    setccpersonvalue('');
    setPerson1Status(false);
    setPerson2Status(false);
    setDateStatus(false);
  };

  const handleCancel = () => {
    setIsModalVisible(false);
  };

  const disabledDate = (current: moment.Moment | undefined) => current && current < moment().startOf('day');

  const sendToBackend = (value: string, person: string, setStatus: React.Dispatch<React.SetStateAction<boolean>>) => {
    const backendUrl = 'https://qultivateapproval.sdprd.oks.drekar.qualcomm.com/check_users';
    axios
      .post(backendUrl, { data: value, person })
      .then(response => {
        if (response.data.response === 'yes') {
          message.success(`${person} is available in the group!`);
          setStatus(true);
        } else {
          let errorMessage = '';
          switch (person) {
            case 'DV/DFT Lead':
              errorMessage = `${person} is not part of bdc.dftsim.leads","bdc.vector.team", "noida.dftsim.leads group`;
              // console.log(currentUser.name);
              break;
            case 'TE Lead':
              errorMessage = `${person} is not part of sd_TELeads", "tce_TELeads", "comet_TELeads", group`;
              break;
            // Add more cases for other types of persons if needed
            default:
              errorMessage = `${person} is not part of the required group`;
              break;
          }
          message.error(errorMessage);
          setStatus(false);
        }
      })
      .catch(() => {
        message.error('Error communicating with the server');
        setStatus(false);
      });
  };

  const handlePerson1Submit = () => {
    sendToBackend(person1Value, 'DV/DFT Lead', setPerson1Status);
  };

  const handlePerson2Submit = () => {
    sendToBackend(person2Value, 'TE Lead', setPerson2Status);
  };

  const handleDateBackend = (): Promise<AxiosResponse<any>> => {
    const backendUrl = 'https://qultivateapproval.sdprd.oks.drekar.qualcomm.com/extension_date_validator';
    const formattedDate = selectedDate?.format('YYYY-MM-DD'); // Adjust the date format based on your backend requirements

    return axios.post(backendUrl, { date: formattedDate });
  };

  const handleDateSubmit = () => {
    handleDateBackend(selectedDate)
      .then(response => {
        if (response.data.response === 'yes') {
          message.success('Date is valid!');
          setDateStatus(true);
        } else {
          message.error('Please select the date less then 7 days from today !');
          setDateStatus(false);
        }
      })
      .catch(() => {
        message.error('Error communicating with the server');
        setDateStatus(false);
      });
  };
  const checkextention = async () => {
    try {
      // Make a request to your backend using Axios
      const response = await axios.get(
        `http://127.0.0.1:5000/Extention_details?selectedOption1=${selectedOption1}&selectedOption2=${selectedOption2}&selectedOption3=${selectedOption3}`,
      );

      // Assuming your backend returns a JSON object with a property 'isEnabled'
      const { data } = response;

      // Check the backend response and update the button state accordingly
      console.log(data);
      if (data === 'Date crossed') {
        message.info('Date crossed');
      } else {
        onFinish (values: any);
      }
    } catch (error) {
      // console.error('Error fetching data from backend:', error);
    }
  };

  const onFinish = (values: any) => {
    const finalBackendUrl = `https://qultivateapproval.sdprd.oks.drekar.qualcomm.com/send_email?selectedOption1=${selectedOption1}&selectedOption2=${selectedOption2}&selectedOption3=${selectedOption3}&username=${currentUser.name}`;

    // Include the selectedDate in the values object
    values.selectedDate = selectedDate?.format('YYYY-MM-DD');

    axios
      .post(finalBackendUrl, values)
      .then(() => {
        message.success('Form submitted successfully!');
        handleOk();
      })
      .catch(() => {});
  };

  const fetchDataFromBackend = async () => {
    try {
      // Make a request to your backend using Axios
      const response = await axios.get(
        `https://qultivateapproval.sdprd.oks.drekar.qualcomm.com/disable_enable_update?selectedOption1=${selectedOption1}&selectedOption2=${selectedOption2}&selectedOption3=${selectedOption3}`,
      );

      // Assuming your backend returns a JSON object with a property 'isEnabled'
      const { data } = response;

      // Check the backend response and update the button state accordingly
      setButtonEnabled(false);
      if (data.isEnabled === 'yes') {
        setButtonEnabled(false);
      } else {
        setButtonEnabled(true);
      }
    } catch (error) {
      // console.error('Error fetching data from backend:', error);
    }
  };
  useEffect(() => {
    if (selectedOption1 && selectedOption2 && selectedOption3.length > 0) {
      fetchDataFromBackend();
    }
  }, [selectedOption1, selectedOption2, selectedOption3]);

  return (
    <div style={{ display: 'flex', alignItems: 'center' }}>
      <Button type="primary" onClick={showModal} disabled={!isButtonEnabled}>
        EXTENSION
      </Button>
      <Modal title="APPROVAL" visible={isModalVisible} onOk={checkextention} onCancel={handleCancel}>
        <Form
          name="myForm"
          initialValues={{ remember: false }}
          onFinish={checkextention}
          // onFinishFailed={onFinishFailed}
          onValuesChange={(changedValues, allValues) => {
            // Update the selectedDate when the extensionDate changes
            if ('extensionDate' in changedValues) {
              setSelectedDate(allValues.extensionDate);
            }
          }}
        >
          <Form.Item
            label="Extension Date"
            name="extensionDate"
            rules={[{ required: false, message: 'Please select Extension Date!' }]}
          >
            <DatePicker style={{ width: '80%' }} disabledDate={disabledDate} onChange={date => setSelectedDate(date)} />
            <Button type="primary" onClick={handleDateSubmit} style={{ marginLeft: '10px' }}>
              Check
            </Button>
          </Form.Item>
          <Form.Item
            label="DV/DFT Lead"
            name="person1"
            rules={[{ required: true, message: 'Please enter DV/DFT Lead' }]}
          >
            <Input
              value={person1Value}
              onChange={e => setPerson1Value(e.target.value)}
              addonAfter={
                <Button type="primary" onClick={handlePerson1Submit}>
                  Check
                </Button>
              }
            />
          </Form.Item>

          <Form.Item label="TE Lead" name="person2" rules={[{ required: true, message: 'Please enter TE Lead' }]}>
            <Input
              value={person2Value}
              onChange={e => setPerson2Value(e.target.value)}
              addonAfter={
                <Button type="primary" onClick={handlePerson2Submit}>
                  Check
                </Button>
              }
            />
          </Form.Item>
          <Form.Item label="Mail CC " name="ccperson" rules={[{ required: false, message: 'Please enter for cc' }]}>
            <Input value={ccpersonvalue} onChange={e => setccpersonvalue(e.target.value)} />
          </Form.Item>

          <Form.Item>
            <Button
              type="primary"
              onClick={checkextention}
              htmlType="submit"
              disabled={!person1Status || !person2Status || !dateStatus}
            >
              Submit
            </Button>
          </Form.Item>
        </Form>
      </Modal>
    </div>
  );
};

export default Approvalsystem;
