import React, { useState, useEffect } from 'react';
import { Modal, Button, Tabs, Input, Form, Table, message, Select } from 'antd';
import axios from 'axios';

const { TabPane } = Tabs;
const { Option } = Select;

const SkuDefinition = ({ selectedOption1, selectedOption2, selectedOption4 }) => {
  const [modalVisible, setModalVisible] = useState(false);

  // State variables for form data
  const [formData, setFormData] = useState({
    qbinMcn: '',
    qbinShortName: '',
    qbinFeaturing: '',
  });

  // State variable for table data
  const [tableData, setTableData] = useState([]);
  const [loading, setLoading] = useState(false);

  // Function to handle form submission
  const handleAddQBIN = async () => {
    try {
      const apiUrl = 'https://qultivateskuedit.sdprd.oks.drekar.qualcomm.com/add_qbin_data';
      
      // Merge the form data with selectedOption1 and selectedOption2
      const requestData = {
        ...formData,
        selectedOption1,
        selectedOption2,
      };

      // Send the data to the backend using Axios
      const response = await axios.post(apiUrl, requestData);

      // Handle the response
      if (response.status === 200) {
        // Display success message from the response data
        message.success(response.data.message);

        // Clear the form data
        setFormData({
          qbinMcn: '',
          qbinShortName: '',
          qbinFeaturing: '',
        });

        // Fetch updated table data
        fetchTableData();
      }
    } catch (error) {
      // Handle errors, e.g., show error message, log the error, etc.
      console.error('Error sending data to backend:', error);
    }
  };

  // Function to fetch table data
  const fetchTableData = async () => {
    setLoading(true);
    try {
      // Replace with your backend API endpoint for fetching table data
      const apiUrl = `https://qultivateskuedit.sdprd.oks.drekar.qualcomm.com/get_qbin_data?selectedOption1=${selectedOption1}&selectedOption2=${selectedOption2}`;

      // Send a GET request to the backend
      const response = await axios.get(apiUrl);

      // Update the table data in the state
      setTableData(response.data);
    } catch (error) {
      console.error('Error fetching table data:', error);
    }
    setLoading(false);
  };

  // Function to handle form input change
  const handleInputChange = (fieldName, value) => {
    setFormData(prevData => ({
      ...prevData,
      [fieldName]: value,
    }));
  };

  // Function to check if all form fields are filled
  const isFormFilled = () => {
    const { qbinMcn, qbinShortName, qbinFeaturing } = formData;
    return qbinMcn.trim() !== '' && qbinShortName.trim() !== '' && qbinFeaturing.trim() !== '';
  };

  return (
    <>
      <Button type="primary" onClick={() => setModalVisible(true)}>
        Qultivate Definition
      </Button>
      <Modal
        title={`SKU Definition for ${selectedOption1} - ${selectedOption2}`}
        visible={modalVisible}
        onCancel={() => setModalVisible(false)}
        footer={null}
        width={800}
      >
        <Tabs defaultActiveKey="1">
          <TabPane tab="Add QBIN" key="1">
            <Form onFinish={handleAddQBIN}>
              <Form.Item
                label="QBIN ID"
                name="qbinMcn"
                rules={[{ required: true, message: 'Please enter QBIN ID' }]}
              >
                <Input
                  placeholder="ID in TSS,e.g. QBIN_1"
                  value={formData.qbinMcn}
                  onChange={e => handleInputChange('qbinMcn', e.target.value)}
                />
              </Form.Item>
              <Form.Item
                label="QBIN Description"
                name="qbinShortName"
                rules={[{ required: true, message: 'Please enter QBIN Description' }]}
              >
                <Input
                  placeholder="any text description, e.g. No gold plus"
                  value={formData.qbinShortName}
                  onChange={e => handleInputChange('qbinShortName', e.target.value)}
                />
              </Form.Item>
              <Form.Item
                label="QBIN NAME"
                name="qbinFeaturing"
                rules={[{ required: true, message: 'Please enter QBIN Featuring' }]}
              >
                <Input
                  placeholder="Name must match ATE TP,e.g. NO_CPUCORE0"
                  value={formData.qbinFeaturing}
                  onChange={e => handleInputChange('qbinFeaturing', e.target.value)}
                />
              </Form.Item>
              <Form.Item>
                <Button type="primary" htmlType="submit" disabled={!isFormFilled()}>
                  Add QBIN
                </Button>
              </Form.Item>
            </Form>
            <Table columns={columns} dataSource={tableData} loading={loading} />
          </TabPane>
          {/* Other TabPanels */}
        </Tabs>
      </Modal>
    </>
  );
};

export default SkuDefinition;
